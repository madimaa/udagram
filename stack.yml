Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  VpcCIDR: 
    Description: IP range (CIDR notation) of the VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet01CIDR:
    Description: IP range (CIDR notation) of the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet02CIDR:
    Description: IP range (CIDR notation) of the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet01CIDR:
    Description: IP range (CIDR notation) of the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet02CIDR:
    Description: IP range (CIDR notation) of the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.4.0/24

Resources:
  UdagramVPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name 
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref UdagramVPC

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdagramVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet01CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdagramVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet02CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet01: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdagramVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet01CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet02: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdagramVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet02CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway01EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      Domain: vpc

  NatGateway02EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway01: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateway01EIP.AllocationId
      SubnetId: !Ref PublicSubnet01

  NatGateway02: 
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway02EIP.AllocationId
      SubnetId: !Ref PublicSubnet02

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref UdagramVPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet02

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref UdagramVPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      SubnetId: !Ref PrivateSubnet01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref UdagramVPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute02:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      SubnetId: !Ref PrivateSubnet02

  UdacityS3ReadOnlyEC2:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  S3ReadPolicies:
    DependsOn: UdacityS3ReadOnlyEC2
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "AmazonS3ReadOnlyAccess"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - "s3:Get*"
              - "s3:List*"
            Resource:
              - arn:aws:s3:::udagram-webapp-1675526411/index.html
              - arn:aws:s3:::udagram-webapp-1675526411/reflection.css
      Roles:
        - !Ref "UdacityS3ReadOnlyEC2"

  ProfileWithRolesForOurApp:
    DependsOn: UdacityS3ReadOnlyEC2
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: !Ref UdagramVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts
      VpcId: !Ref UdagramVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData: !Base64 |
        #!/bin/bash
        sudo apt-get update -y
        sudo apt-get install apache2 curl unzip -y
        sudo systemctl start apache2.service
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        cd /var/www/html
        aws s3 cp s3://udagram-webapp-1675526411/index.html .
        aws s3 cp s3://udagram-webapp-1675526411/reflection.css .
      ImageId: ami-08fdec01f5df9998f
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
        - !Ref WebAppTargetGroup

  WebAppLoadBalancer:
    DependsOn: InternetGateway
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - !Ref PublicSubnet01
      - !Ref PublicSubnet02
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          !Ref WebAppTargetGroup
      LoadBalancerArn:
        !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  ElasticLBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref UdagramVPC

Outputs:

  VPC: 
    Description: A reference to the created VPC
    Value: !Ref UdagramVPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  WebAppLoadBalancerURL:
    Description: WebApp Endpoint URL
    Value: !Sub [ 'http://${DNSName}', DNSName: !GetAtt WebAppLoadBalancer.DNSName ]
    Export:
      Name: !Sub ${EnvironmentName}-Endpoint-Url
